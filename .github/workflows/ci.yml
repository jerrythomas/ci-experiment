name: publish

on:
  push:
    branches:
      - develop
      - 'release/v?[0-9].[0-9].[0-9]**'
    tags:
      - 'v?[0-9].[0-9].[0-9]**'
  pull_request:
    branches:
      - develop

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Version and env from branch
        if: github.ref_type == 'branch'
        run: |
          IMAGE_TAG=`echo "${{ github.ref }}" | cut -d/ -f3`
          VERSION_TAG=`echo "${{ github.ref }}" | cut -d/ -f4`
          VERSION_TAG=${VERSION_TAG:-$IMAGE_TAG}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Version and env from tag
        if: github.ref_type == 'tag'
        run: |
          VERSION_TAG=`echo "${{ github.ref }}" | cut -d/ -f3`
          IMAGE_TAG="prod"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.APP_NAME }}
        run: |
          if [ "${{env.IMAGE_TAG}}" = "prod" ]; then
             echo "docker pull $REGISTRY/$REPOSITORY:$VERSION_TAG"
          else
             echo "docker build -t $REGISTRY/$REPOSITORY:$VERSION_TAG ."
             echo "docker push $REGISTRY/$REPOSITORY:$VERSION_TAG"
          fi
          if [ "${VERSION_TAG}" != "${IMAGE_TAG}" ]; then
             echo "docker tag $REGISTRY/$REPOSITORY:$VERSION_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG "
             echo "docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG"
          fi
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"

      - name: Service and task names
        id: prefix
        run: |
          ENV_PREFIX=$IMAGE_TAG
          if [ "$IMAGE_TAG" = "develop" ]; then
             ENV_PREFIX="dev"
          elif [ "$IMAGE_TAG" = "release" ]; then
             ENV_PREFIX="uat"
          fi
          echo "::set-output service-name=${ENV_PREFIX}-${{ secrets.APP_NAME }}"
          echo "::set-output task-file=${ENV_PREFIX}-${{ secrets.APP_NAME }}.json"
      - name: display output
        run: |
          echo ${{ steps.prefix.outputs.service-name }}
          echo ${{ steps.prefix.outputs.task-file }}

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.prefix.outputs.task-file }}
      #     container-name: ${{ secrets.APP_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ steps.prefix.outputs.service-name }}
      #     cluster: primary
      #     wait-for-service-stability: true
